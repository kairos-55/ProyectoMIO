package GUI.GestionInformacion.Bus;

import Control.ControlBus;
import GUI.PaquetePrincipal.AnclarVentanaInterna;
import Modelo.Entidades.Bus;
import Modelo.Validadores.LanzarMensaje;
import Modelo.Excepciones.MiExcepcion;
import Modelo.Validadores.Validador;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.border.EtchedBorder;

/**
 *
 * JIFBuscarBus
 * 
 * @author Mauricio Bernardo Dominguez Bocanegra. Código: 9927680
 * @author Martha Cecilia Holguin Tovar. Código: 1129455
 * @author Jesús Alberto Ramírez Otálvaro. Código: 1422554
 * 
 */

public class JIFBuscarBus extends AnclarVentanaInterna {

    /**
     * Creates new form JIFViewProfile
     *
     * @param title
     * @param parentWidth
     * @param parentHeight
     * @throws Modelo.Excepciones.MiExcepcion
     */
    public JIFBuscarBus(String title, int parentWidth, int parentHeight) throws MiExcepcion {
        super();
        this.parentWidth = parentWidth;
        this.parentHeight = parentHeight;
        setTitle(title);
        setResizable(false);
        setClosable(true);
        setMaximizable(false);
        setSize(WIDTH_, HEIGHT_);
        setLocation((int) (Math.abs(this.parentWidth - this.getSize().width) / 2), (int) (Math.abs(this.parentHeight - this.getSize().height) / 2));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocked(true);
        initComponents();
        initializeComponents();
        
        actualizarBuses();
        jCBPlacaBus.addActionListener(manejadorEventos);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPInformacion = new javax.swing.JPanel();
        jLCodigoEstacion = new javax.swing.JLabel();
        jTFPlacaBus = new javax.swing.JTextField();
        jCBPlacaBus = new javax.swing.JComboBox();
        jPLabels = new javax.swing.JPanel();
        jLControlPassword = new javax.swing.JLabel();
        jPControls = new javax.swing.JPanel();
        jPBotonBuscar = new javax.swing.JPanel();
        jPContenedorBoton = new javax.swing.JPanel();
        jBBuscarBus = new javax.swing.JButton();

        jPInformacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPInformacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPInformacion.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jLCodigoEstacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLCodigoEstacion.setText("Placa del bus: ");
        jPInformacion.add(jLCodigoEstacion);

        jTFPlacaBus.setMaximumSize(new java.awt.Dimension(200, 25));
        jTFPlacaBus.setMinimumSize(new java.awt.Dimension(40, 25));
        jTFPlacaBus.setPreferredSize(new java.awt.Dimension(100, 25));
        jTFPlacaBus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFPlacaBusFocusLost(evt);
            }
        });
        jPInformacion.add(jTFPlacaBus);

        jCBPlacaBus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCBPlacaBus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPInformacion.add(jCBPlacaBus);

        jPLabels.setLayout(new java.awt.GridLayout(3, 0));
        jPLabels.add(jLControlPassword);

        jPInformacion.add(jPLabels);

        jPControls.setLayout(new java.awt.GridLayout(3, 0));
        jPInformacion.add(jPControls);

        getContentPane().add(jPInformacion, java.awt.BorderLayout.NORTH);

        jPBotonBuscar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPBotonBuscar.setMaximumSize(new java.awt.Dimension(610, 37));
        jPBotonBuscar.add(jPContenedorBoton);

        jBBuscarBus.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBBuscarBus.setText("BUSCAR BUS");
        jBBuscarBus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarBusActionPerformed(evt);
            }
        });
        jPBotonBuscar.add(jBBuscarBus);

        getContentPane().add(jPBotonBuscar, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarBusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarBusActionPerformed
        try {
            registros = false;
            displayTab();
        } catch (MiExcepcion ex) {
            Logger.getLogger(JIFBuscarBus.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBBuscarBusActionPerformed

    private void jTFPlacaBusFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFPlacaBusFocusLost
                    
            /*if(jTFCodigoEstacion.getText()!=""){
                
            String cod = jTFCodigoEstacion.getText();
            
            String codigo = "";
            
            String item = "";
            
            int indice = 0;
            
            boolean encontrado = false;
            
                for(int i=1; i<jCBCodigoEstacion.getItemCount(); i++){
                    
                    item = (String) jCBCodigoEstacion.getItemAt(i);
                    
                    for(int j=0; j<item.length(); j++) {
                        
                        if(item.charAt(i)==' ') { 
                                
                                codigo = item.substring(0, i);  
                                
                                if(cod.equals(codigo)) {
                                    indice = i;
                                    encontrado = true;
                                    break;
                                }
                                
                            }
                        
                    }
                    
                    if(encontrado){
                        break;
                    }
                }
                
            jCBCodigoEstacion.setSelectedIndex(indice);
                
            }else{
                jCBCodigoEstacion.setSelectedIndex(0);
            }*/
        
    }//GEN-LAST:event_jTFPlacaBusFocusLost

    private void initializeComponents() {
        lanzarMensaje = new LanzarMensaje(this);
        manejadorEventos = new buscarEstacionManejadorEventos();
        controlBus = new ControlBus();
        validador = new Validador();
        registros = true;
    }

    private void actualizarBuses() throws MiExcepcion {
        Bus[] buses = controlBus.listarBuses();
        if ((Arrays.asList(buses)).isEmpty()) {
            
            if(!registros){
                dispose();
            }
            throw new MiExcepcion("No hay buses registrados en la base de datos.");            
        }
        
        String[] placas = new String[buses.length+1];
        
        placas[0] = "Seleccione la placa del bus...";
        
        for(int i=1; i<=buses.length; i++){
            
            placas[i] = buses[i-1].getPlaca();
            
        }
        
        jCBPlacaBus.setModel(new javax.swing.DefaultComboBoxModel(placas));
    }
            
    private void displayTab() throws MiExcepcion {
        // Bloqueamos el boton Buscar
        jBBuscarBus.setEnabled(false);
        jTFPlacaBus.setEditable(false);
        jCBPlacaBus.setEnabled(false);
        // Desbloqueamos el Internal Frame     
        setLocked(false);
        // Definimos un nuevo tamaño.
        setSize(WIDTH_, 320);
        // Definimos el layot del panel...  
        jPUpdatePassword = new JPanel();
        jPUpdatePassword.setLayout(new BorderLayout());
        jPUpdatePassword.setBorder(new EtchedBorder());
        // Creamos un panel para las etiquetas.
        JPanel jPUpdateLabels = new JPanel();
        jPUpdateLabels.setLayout(new GridLayout(4, 1));
        // Creamos las etiquetas.
        JLabel jLModelo = new JLabel("Modelo:");
        JLabel jLMarca = new JLabel("Marca:");
        JLabel jLCapacidad = new JLabel("Capacidad:");
        JLabel jLTipo = new JLabel("Tipo");
        // Añadimos las etiquetas.
        jPUpdateLabels.add(jLModelo);
        jPUpdateLabels.add(jLMarca);
        jPUpdateLabels.add(jLCapacidad);
        jPUpdateLabels.add(jLTipo);
        // Creamos el panel para los campos de contraseña.
        JPanel jPUpdateTF = new JPanel();
        jPUpdateTF.setLayout(new GridLayout(4, 1));
        // Campos de contraseña.
        jTFModelo = new JTextField();
        jTFMarca = new JTextField();
        jTFCapacidad = new JTextField();
        jCBTipo = new JComboBox(); 
        
        String[] opciones = {"Seleccione el tipo de bus...", "ARTICULADO", "PADRON", "ALIMENTADOR"};
        
        jCBTipo.setModel(new javax.swing.DefaultComboBoxModel(opciones));            
        
        // Añadimos los campos de texto al panel
        jPUpdateTF.add(jTFModelo);
        jPUpdateTF.add(jTFMarca);
        jPUpdateTF.add(jTFCapacidad);
        jPUpdateTF.add(jCBTipo);
        
        jPBotonesModificar = new JPanel();
        jPBotonesModificar.setLayout(new FlowLayout());
        //jPBotonesModificar.setBorder(new EtchedBorder());
        
        jBGuardarModificaciones = new JButton("GUARDAR MODIFICACIÓN");
        jBGuardarModificaciones.addActionListener(manejadorEventos);
        
        jBCancelar = new JButton("CANCELAR");
        jBCancelar.addActionListener(manejadorEventos);
        
        jPBotonesModificar.add(jBGuardarModificaciones);
        jPBotonesModificar.add(jBCancelar);
        
        jPBotonesModificar.setVisible(false);
        
        String placa = jTFPlacaBus.getText().trim();
        
        Bus bus = controlBus.buscarBus(placa);
        
        jTFModelo.setText(bus.getModelo());
        jTFMarca.setText(bus.getMarca());
        jTFCapacidad.setText("" + bus.getCapacidad());
                
        for(int i=1; i<=(jCBTipo.getItemCount()-1); i++) {
                       
            if(bus.getTipo().equalsIgnoreCase((String)jCBTipo.getItemAt(i))) {
                jCBTipo.setSelectedIndex(i);
                break;
            }
            
        }
        
        jTFModelo.setEditable(false);
        jTFMarca.setEditable(false);
        jTFCapacidad.setEditable(false);
        jCBTipo.setEnabled(false);
        
        // Creamos un panel para los botones
        JPanel jPUpdateButtons = new JPanel();
        //jPUpdateButtons.setLayout(new GridLayout(1, 2));
        jPUpdateButtons.setLayout(new FlowLayout());
        
        JPanel jPBotones = new JPanel();
        jPBotones.setLayout(new BoxLayout(jPBotones, BoxLayout.PAGE_AXIS));
        jPBotones.setBorder(new EtchedBorder());
        //jPBotones.setLayout(new FlowLayout());
        //jPBotones.setLayout(new GridLayout(1, 2));
        //jPUpdateButtons.setBorder(new EtchedBorder());
        // Creamos los botones.
        jBModificar = new JButton("MODIFICAR");
        jBModificar.addActionListener(manejadorEventos);
        
        jBEliminar = new JButton("ELIMINAR");
        jBEliminar.addActionListener(manejadorEventos);
        
        jBBuscar = new JButton("BUSCAR DE NUEVO");
        jBBuscar.addActionListener(manejadorEventos);
        
        // Procedemos a agregar los botones al panel
        jPUpdateButtons.add(jBModificar);
        jPUpdateButtons.add(jBEliminar);
        jPUpdateButtons.add(jBBuscar);
        
        jPBotones.add(jPBotonesModificar);
        jPBotones.add(jPUpdateButtons);
        // Procedemos a armar el panel completo.
        jPUpdatePassword.add(jPUpdateLabels, "Before");
        jPUpdatePassword.add(jPUpdateTF, "Center");
        jPUpdatePassword.add(jPBotones, "Last");
        
        //jPUpdatePassword.add(jPUpdateLabels, "Before");
        //jPUpdatePassword.add(jPUpdateTF);
        //jPUpdatePassword.add(jPBotonesModificar);
        
        //jPUpdatePassword.add(jPUpdateButtons, "Last");
        // Agregamos el panel ala ventana principal
        //this.add(jPUpdatePassword, "South");
        this.jPBotonBuscar.setLayout(new BoxLayout(jPBotonBuscar, BoxLayout.PAGE_AXIS));
        this.jPBotonBuscar.add(jPUpdatePassword);        
        // Bloqueamos de nuevo el internal frame.
        setLocked(true);
        // Actualizamos la interfaz.
        updateUI();
    }

    private void retractTab() {
        // Limpiamos los campos.
        this.jTFModelo.setText("");
        this.jTFMarca.setText("");
        this.jTFCapacidad.setText("");
        this.jCBTipo.setSelectedIndex(0);
        this.jTFPlacaBus.setText("");
        this.jCBPlacaBus.setSelectedIndex(0);
        // Debemos recoger la ventana y retirar los componentes.
        // Reactivamos el boton editar.
        jBBuscarBus.setEnabled(true);
        jTFPlacaBus.setEditable(true);
        jCBPlacaBus.setEnabled(true);
        // Retiramos los componentes:
        this.jPBotonBuscar.remove(jPUpdatePassword);
        jPBotonBuscar.setLayout(new FlowLayout());
        // Desbloqueamos el internal frame para devolverlo a su tamaño original.
        setLocked(false);
        setSize(WIDTH_, HEIGHT_);
        setLocked(true);
        // Actualizamos la interfaz grafica.
        updateUI();
    }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscarBus;
    private javax.swing.JComboBox jCBPlacaBus;
    private javax.swing.JLabel jLCodigoEstacion;
    private javax.swing.JLabel jLControlPassword;
    private javax.swing.JPanel jPBotonBuscar;
    private javax.swing.JPanel jPContenedorBoton;
    private javax.swing.JPanel jPControls;
    private javax.swing.JPanel jPInformacion;
    private javax.swing.JPanel jPLabels;
    private javax.swing.JTextField jTFPlacaBus;
    // End of variables declaration//GEN-END:variables
    private final int parentWidth;
    private final int parentHeight;
    private JButton jBModificar;
    private JButton jBEliminar;
    private JButton jBBuscar;
    private JButton jBGuardarModificaciones;
    private JButton jBCancelar;
    private JTextField jTFModelo;
    private JTextField jTFMarca;
    private JTextField jTFCapacidad;
    private JComboBox jCBTipo;
    private JPanel jPUpdatePassword;
    private JPanel jPBotonesModificar;
    private LanzarMensaje lanzarMensaje;
    private buscarEstacionManejadorEventos manejadorEventos;
    private final static int WIDTH_ = 650;
    private final static int HEIGHT_ = 120;
    private Validador validador;
    private ControlBus controlBus;
    private boolean registros;
    
    private class buscarEstacionManejadorEventos implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            if(e.getSource() == jCBPlacaBus) {
                
                try{
                    if(jCBPlacaBus.getSelectedIndex()!=0){                                                                                          
                                
                        String informacion = (String) jCBPlacaBus.getSelectedItem();
                                
                        jTFPlacaBus.setText(informacion);
                        
                    }else{
                        jTFPlacaBus.setText("");
                    }
                    
                } catch (Exception ex){
                    jTFPlacaBus.setText("");
                }          
            }
            
            if(e.getSource() == jBModificar){
                
                jPBotonesModificar.setVisible(true);
                jBModificar.setEnabled(false);
                jBEliminar.setEnabled(false);
                jBBuscar.setEnabled(false);
                
                jTFModelo.setEditable(true);
                jTFMarca.setEditable(true);
                jTFCapacidad.setEditable(true);
                jCBTipo.setEnabled(true);
                
            }
            
            if(e.getSource() == jBGuardarModificaciones) {
                
                String[] informacion = new String[5];
                informacion[0] = jTFPlacaBus.getText().trim();
                informacion[1] = jTFModelo.getText().trim();
                informacion[2] = jTFMarca.getText().trim().toUpperCase();
                informacion[3] = jTFCapacidad.getText().trim();
                informacion[4] = (String) jCBTipo.getSelectedItem();
                
                try {
                                         
                    validador.validarCadenaNumeros(informacion[1], "El MODELO del bus ");
                    validador.validarLongitudCadena(informacion[1], "El MODELO", 4);                       
                    validador.validarCadenaNumeros(informacion[3], "La CAPACIDAD del bus ");

                    if("".equals(informacion[3])) {
                            informacion[3] = "0";            
                    }

                    if (jCBTipo.getSelectedItem()==jCBTipo.getItemAt(0)) {

                        lanzarMensaje.mostrarMessageDialog("Debe seleccionar el tipo de bus.", title, JOptionPane.INFORMATION_MESSAGE);                 

                    }else {

                        controlBus.modificarBus(informacion);
                        lanzarMensaje.mostrarMessageDialog("El bus ha sido modificado en la base de datos con éxito.", title, JOptionPane.INFORMATION_MESSAGE);
                        actualizarBuses();                                             
                        retractTab();
                    }
            
                } catch (MiExcepcion ex) {
                    lanzarMensaje.mostrarMessageDialog(ex.getMessage(), title, JOptionPane.ERROR_MESSAGE);
                }              
                
            }
            
            if(e.getSource() == jBCancelar || e.getSource() == jBBuscar) {
                
                retractTab();
                
            }
            
            if(e.getSource() == jBEliminar) {
                
                String placa = jTFPlacaBus.getText();
                
                try {
                    controlBus.eliminarBus(placa);
                    lanzarMensaje.mostrarMessageDialog("El bus fue eliminado con éxito.", title, JOptionPane.INFORMATION_MESSAGE);
                    actualizarBuses();                    
                } catch (MiExcepcion ex) {
                    
                    lanzarMensaje.mostrarMessageDialog(ex.getMessage(), title, JOptionPane.ERROR_MESSAGE);
                    
                } finally {
                    
                    retractTab();
                    
                }
                
            }
            
        }
    }
    
};
