package GUI.GestionInformacion.Estacion;

import Control.ControlEstacion;
import GUI.PaquetePrincipal.AnclarVentanaInterna;
import Modelo.Entidades.Estacion;
import Modelo.Validadores.LanzarMensaje;
import Modelo.Excepciones.MiExcepcion;
import Modelo.Validadores.Validador;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.border.EtchedBorder;

/**
 *
 * JIFBuscarEstacion
 * 
 * @author Álvaro Jose Lobatón Restrepo. Código: 1130054
 * @author Jhon Jairo Pantoja. Código: 1125572
 * @author Mauricio Bernardo Dominguez Bocanegra. Código: 9927680
 * @author Martha Cecilia Holguin Tovar. Código: 1129455
 * @author Jesús Alberto Ramírez Otálvaro. Código: 1422554
 * @author Alejandro Mejia Méndez. Código: 1330785
 */

public class JIFBuscarEstacion extends AnclarVentanaInterna {

    /**
     * Creates new form JIFViewProfile
     *
     * @param title
     * @param parentWidth
     * @param parentHeight
     * @param username
     * @param completeName
     */
    public JIFBuscarEstacion(String title, int parentWidth, int parentHeight) throws MiExcepcion {
        super();
        this.parentWidth = parentWidth;
        this.parentHeight = parentHeight;
        setTitle(title);
        setResizable(false);
        setClosable(true);
        setMaximizable(false);
        setSize(WIDTH_, HEIGHT_);
        setLocation((int) (Math.abs(this.parentWidth - this.getSize().width) / 2), (int) (Math.abs(this.parentHeight - this.getSize().height) / 2));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocked(true);
        initComponents();
        initializeComponents();
        
        actualizarEstaciones();
        jCBCodigoEstacion.addActionListener(manejadorEventos);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPInformacion = new javax.swing.JPanel();
        jLCodigoEstacion = new javax.swing.JLabel();
        jTFCodigoEstacion = new javax.swing.JTextField();
        jCBCodigoEstacion = new javax.swing.JComboBox();
        jPLabels = new javax.swing.JPanel();
        jLControlPassword = new javax.swing.JLabel();
        jPControls = new javax.swing.JPanel();
        jPBotonBuscar = new javax.swing.JPanel();
        jBBuscarEstacion = new javax.swing.JButton();

        jPInformacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPInformacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPInformacion.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jLCodigoEstacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLCodigoEstacion.setText("Código de la Estación: ");
        jPInformacion.add(jLCodigoEstacion);

        jTFCodigoEstacion.setMaximumSize(new java.awt.Dimension(200, 25));
        jTFCodigoEstacion.setMinimumSize(new java.awt.Dimension(40, 25));
        jTFCodigoEstacion.setPreferredSize(new java.awt.Dimension(40, 25));
        jTFCodigoEstacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCodigoEstacionFocusLost(evt);
            }
        });
        jPInformacion.add(jTFCodigoEstacion);

        jCBCodigoEstacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCBCodigoEstacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCBCodigoEstacion.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jCBCodigoEstacionComponentShown(evt);
            }
        });
        jPInformacion.add(jCBCodigoEstacion);

        jPLabels.setLayout(new java.awt.GridLayout(3, 0));
        jPLabels.add(jLControlPassword);

        jPInformacion.add(jPLabels);

        jPControls.setLayout(new java.awt.GridLayout(3, 0));
        jPInformacion.add(jPControls);

        getContentPane().add(jPInformacion, java.awt.BorderLayout.NORTH);

        jPBotonBuscar.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jBBuscarEstacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBBuscarEstacion.setText("BUSCAR ESTACIÓN");
        jBBuscarEstacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarEstacionActionPerformed(evt);
            }
        });
        jPBotonBuscar.add(jBBuscarEstacion);

        getContentPane().add(jPBotonBuscar, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarEstacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarEstacionActionPerformed
        try {
            displayTab();
        } catch (MiExcepcion ex) {
            Logger.getLogger(JIFBuscarEstacion.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBBuscarEstacionActionPerformed

    private void jCBCodigoEstacionComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jCBCodigoEstacionComponentShown
        
    }//GEN-LAST:event_jCBCodigoEstacionComponentShown

    private void jTFCodigoEstacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodigoEstacionFocusLost
                    
            if(jTFCodigoEstacion.getText()!=""){
                
            String cod = jTFCodigoEstacion.getText();
            
            String codigo = "";
            
            String item = "";
            
            int indice = 0;
            
            boolean encontrado = false;
            
                for(int i=1; i<jCBCodigoEstacion.getItemCount(); i++){
                    
                    item = (String) jCBCodigoEstacion.getItemAt(i);
                    
                    for(int j=0; j<item.length(); j++) {
                        
                        if(item.charAt(i)==' ') { 
                                
                                codigo = item.substring(0, i);  
                                
                                if(cod.equals(codigo)) {
                                    indice = i;
                                    encontrado = true;
                                    break;
                                }
                                
                            }
                        
                    }
                    
                    if(encontrado){
                        break;
                    }
                }
                
            jCBCodigoEstacion.setSelectedIndex(indice);
                
            }else{
                jCBCodigoEstacion.setSelectedIndex(0);
            }
        
    }//GEN-LAST:event_jTFCodigoEstacionFocusLost

    private void initializeComponents() {
        lanzarMensaje = new LanzarMensaje(this);
        manejadorEventos = new buscarEstacionManejadorEventos();
        controlEstacion = new ControlEstacion();
        validator = new Validador();
    }

    private void actualizarEstaciones() throws MiExcepcion {
        Estacion[] estaciones = controlEstacion.listarEstaciones();
        if ((Arrays.asList(estaciones)).isEmpty()) {
            throw new MiExcepcion("No hay estaciones registradas en la base de datos.");
        }
        
        String[] codigos = new String[estaciones.length+1];
        
        codigos[0] = "Seleccione el código de la estación...";
        
        for(int i=1; i<=estaciones.length; i++){
            
            codigos[i] = estaciones[i-1].getId() + " " + estaciones[i-1].getNombre();
            
        }
        
        jCBCodigoEstacion.setModel(new javax.swing.DefaultComboBoxModel(codigos));
    }
    
    private void displayTab() throws MiExcepcion {
        // Bloqueamos el boton Editar
        //jBEditPassword.setEnabled(false);
        // Desbloqueamos el Internal Frame     
        setLocked(false);
        // Definimos un nuevo tamaño.
        setSize(WIDTH_, 240);
        // Definimos el layot del panel...  
        jPUpdatePassword = new JPanel();
        jPUpdatePassword.setLayout(new BorderLayout());
        jPUpdatePassword.setBorder(new EtchedBorder());
        // Creamos un panel para las etiquetas.
        JPanel jPUpdateLabels = new JPanel();
        jPUpdateLabels.setLayout(new GridLayout(3, 1));
        // Creamos las etiquetas.
        JLabel jLCurrent = new JLabel("Nombre:");
        JLabel jLNew = new JLabel("Dirección:");
        JLabel jLRetype = new JLabel("Cédula Director:");
        // Añadimos las etiquetas.
        jPUpdateLabels.add(jLCurrent);
        jPUpdateLabels.add(jLNew);
        jPUpdateLabels.add(jLRetype);
        // Creamos el panel para los campos de contraseña.
        JPanel jPUpdateTF = new JPanel();
        jPUpdateTF.setLayout(new GridLayout(3, 1));
        // Campos de contraseña.
        jTFNombre = new JTextField();
        jTFDireccion = new JTextField();
        jTFCedulaDirector = new JTextField();
        // Añadimos los campos de texto al panel
        jPUpdateTF.add(jTFNombre);
        jPUpdateTF.add(jTFDireccion);
        jPUpdateTF.add(jTFCedulaDirector);
        
        String codigo = jTFCodigoEstacion.getText().trim();
        
        Estacion estacion = controlEstacion.buscarEstacion(codigo);
        
        jTFNombre.setText(estacion.getNombre());
        jTFDireccion.setText(estacion.getDireccion());
        jTFCedulaDirector.setText(estacion.getCedulaDirector());
        
        jTFNombre.setEditable(false);
        jTFDireccion.setEditable(false);
        jTFCedulaDirector.setEditable(false);
        
        // Creamos un panel para los botones
        JPanel jPUpdateButtons = new JPanel();
        //jPUpdateButtons.setLayout(new GridLayout(1, 2));
        jPUpdateButtons.setLayout(new FlowLayout());
        jPUpdateButtons.setBorder(new EtchedBorder());
        // Creamos los botones.
        jBSave = new JButton("SALVAR");
        //jBSave.addActionListener(eventManager);
        jBCancel = new JButton("CANCEL");
        //jBCancel.addActionListener(eventManager);
        // Procedemos a agregar los botones al panel
        jPUpdateButtons.add(jBSave);
        jPUpdateButtons.add(jBCancel);
        // Procedemos a armar el panel completo.
        jPUpdatePassword.add(jPUpdateLabels, "Before");
        jPUpdatePassword.add(jPUpdateTF, "Center");
        jPUpdatePassword.add(jPUpdateButtons, "Last");
        // Agregamos el panel ala ventana principal
        this.add(jPUpdatePassword, "South");
        // Bloqueamos de nuevo el internal frame.
        setLocked(true);
        // Actualizamos la interfaz.
        updateUI();
    }

    private void retractTab() {
        // Limpiamos los campos.
        this.jTFNombre.setText("");
        this.jTFDireccion.setText("");
        this.jTFCedulaDirector.setText("");
        // Debemos recoger la ventana y retirar los componentes.
        // Reactivamos el boton editar.
        //jBEditPassword.setEnabled(true);
        // Retiramos los componentes:
        remove(jPUpdatePassword);
        // Desbloqueamos el internal frame para devolverlo a su tamaño original.
        setLocked(false);
        setSize(WIDTH_, HEIGHT_);
        setLocked(true);
        // Actualizamos la interfaz grafica.
        updateUI();
    }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscarEstacion;
    private javax.swing.JComboBox jCBCodigoEstacion;
    private javax.swing.JLabel jLCodigoEstacion;
    private javax.swing.JLabel jLControlPassword;
    private javax.swing.JPanel jPBotonBuscar;
    private javax.swing.JPanel jPControls;
    private javax.swing.JPanel jPInformacion;
    private javax.swing.JPanel jPLabels;
    private javax.swing.JTextField jTFCodigoEstacion;
    // End of variables declaration//GEN-END:variables
    private final int parentWidth;
    private final int parentHeight;
    private JButton jBSave;
    private JButton jBCancel;
    private JTextField jTFNombre;
    private JTextField jTFDireccion;
    private JTextField jTFCedulaDirector;
    private JPanel jPUpdatePassword;
    private LanzarMensaje lanzarMensaje;
    private buscarEstacionManejadorEventos manejadorEventos;
    private final static int WIDTH_ = 610;
    private final static int HEIGHT_ = 120;
    private Validador validator;
    private ControlEstacion controlEstacion;

    private class buscarEstacionManejadorEventos implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            if(e.getSource() == jCBCodigoEstacion) {
                
                try{
                    if(jCBCodigoEstacion.getSelectedIndex()!=0){                                                                                          
                                
                        String informacion = (String) jCBCodigoEstacion.getSelectedItem();
                        
                        String codigo = "";
                        
                        for(int i=0; i<informacion.length(); i++) {
                            
                            if(informacion.charAt(i)==' ') { 
                                
                                codigo = informacion.substring(0, i);  
                                
                                break;
                                
                            }
                        } 
                         
                        jTFCodigoEstacion.setText(codigo);
                        
                    }else{
                        jTFCodigoEstacion.setText("");
                    }
                    
                } catch (Exception ex){
                    jTFCodigoEstacion.setText("");
                }          
            }
        }
    }
    
};
