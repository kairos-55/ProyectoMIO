package GUI.GestionInformacion.Turno;

import Control.ControlEmpleado;
import Control.ControlTurno;
import GUI.PaquetePrincipal.AnclarVentanaInterna;
import Modelo.Entidades.Empleado;
import Modelo.Entidades.Turno;
import Modelo.Validadores.LanzarMensaje;
import Modelo.Excepciones.MiExcepcion;
import Modelo.Validadores.Validador;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
import javax.swing.border.EtchedBorder;

/**
 *
 * JIFBuscarTurno
 * 
 * @author Mauricio Bernardo Dominguez Bocanegra. Código: 9927680
 * @author Martha Cecilia Holguin Tovar. Código: 1129455
 * @author Jesús Alberto Ramírez Otálvaro. Código: 1422554
 * 
 */

public class JIFBuscarTurno extends AnclarVentanaInterna {

    /**
     * Creates new form JIFViewProfile
     *
     * @param title
     * @param parentWidth
     * @param parentHeight
     * @throws Modelo.Excepciones.MiExcepcion
     */
    public JIFBuscarTurno(String title, int parentWidth, int parentHeight) throws MiExcepcion {
        super();
        this.parentWidth = parentWidth;
        this.parentHeight = parentHeight;
        setTitle(title);
        setResizable(false);
        setClosable(true);
        setMaximizable(false);
        setSize(WIDTH_, HEIGHT_);
        setLocation((int) (Math.abs(this.parentWidth - this.getSize().width) / 2), (int) (Math.abs(this.parentHeight - this.getSize().height) / 2));
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setLocked(true);
        initComponents();
        initializeComponents();
        
        actualizarTurnos();
        jCBCodigoTurno.addActionListener(manejadorEventos);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPInformacion = new javax.swing.JPanel();
        jLCodigoTurno = new javax.swing.JLabel();
        jTFCodigoTurno = new javax.swing.JTextField();
        jCBCodigoTurno = new javax.swing.JComboBox();
        jPLabels = new javax.swing.JPanel();
        jLControlPassword = new javax.swing.JLabel();
        jPControls = new javax.swing.JPanel();
        jPBotonBuscar = new javax.swing.JPanel();
        jPContenedorBoton = new javax.swing.JPanel();
        jBBuscarTurno = new javax.swing.JButton();

        jPInformacion.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPInformacion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jPInformacion.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 15, 5));

        jLCodigoTurno.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLCodigoTurno.setText("Código del turno : ");
        jPInformacion.add(jLCodigoTurno);

        jTFCodigoTurno.setMaximumSize(new java.awt.Dimension(200, 25));
        jTFCodigoTurno.setMinimumSize(new java.awt.Dimension(40, 25));
        jTFCodigoTurno.setPreferredSize(new java.awt.Dimension(40, 25));
        jTFCodigoTurno.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCodigoTurnoFocusLost(evt);
            }
        });
        jTFCodigoTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFCodigoTurnoActionPerformed(evt);
            }
        });
        jPInformacion.add(jTFCodigoTurno);

        jCBCodigoTurno.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jCBCodigoTurno.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPInformacion.add(jCBCodigoTurno);

        jPLabels.setLayout(new java.awt.GridLayout(3, 0));
        jPLabels.add(jLControlPassword);

        jPInformacion.add(jPLabels);

        jPControls.setLayout(new java.awt.GridLayout(3, 0));
        jPInformacion.add(jPControls);

        getContentPane().add(jPInformacion, java.awt.BorderLayout.NORTH);

        jPBotonBuscar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPBotonBuscar.setMaximumSize(new java.awt.Dimension(610, 37));
        jPBotonBuscar.add(jPContenedorBoton);

        jBBuscarTurno.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jBBuscarTurno.setText("BUSCAR TURNO");
        jBBuscarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarTurnoActionPerformed(evt);
            }
        });
        jPBotonBuscar.add(jBBuscarTurno);

        getContentPane().add(jPBotonBuscar, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarTurnoActionPerformed
        try {
            registros = false;
            displayTab();
        } catch (MiExcepcion ex) {
            Logger.getLogger(JIFBuscarTurno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jBBuscarTurnoActionPerformed

    private void jTFCodigoTurnoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCodigoTurnoFocusLost
                    
            /*if(jTFCodigoEstacion.getText()!=""){
                
            String cod = jTFCodigoEstacion.getText();
            
            String codigo = "";
            
            String item = "";
            
            int indice = 0;
            
            boolean encontrado = false;
            
                for(int i=1; i<jCBCodigoEstacion.getItemCount(); i++){
                    
                    item = (String) jCBCodigoEstacion.getItemAt(i);
                    
                    for(int j=0; j<item.length(); j++) {
                        
                        if(item.charAt(i)==' ') { 
                                
                                codigo = item.substring(0, i);  
                                
                                if(cod.equals(codigo)) {
                                    indice = i;
                                    encontrado = true;
                                    break;
                                }
                                
                            }
                        
                    }
                    
                    if(encontrado){
                        break;
                    }
                }
                
            jCBCodigoEstacion.setSelectedIndex(indice);
                
            }else{
                jCBCodigoEstacion.setSelectedIndex(0);
            }*/
        
    }//GEN-LAST:event_jTFCodigoTurnoFocusLost

    private void jTFCodigoTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFCodigoTurnoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFCodigoTurnoActionPerformed

    private void initializeComponents() {
        lanzarMensaje = new LanzarMensaje(this);
        manejadorEventos = new buscarTurnoManejadorEventos();
        controlTurno = new ControlTurno();
        controlEmpleado = new ControlEmpleado();
        validador = new Validador();
        registros = true;
    }

    private void actualizarTurnos() throws MiExcepcion {
        Turno[] turnos = controlTurno.listarTurnos();
        if ((Arrays.asList(turnos)).isEmpty()) {
            
            if(!registros){
                dispose();
            }
            throw new MiExcepcion("No hay turnos registrados en la base de datos.");            
        }
        
        String[] codigos = new String[turnos.length+1];
        
        codigos[0] = "Seleccione el código del turno...";
        
        for(int i=1; i<=turnos.length; i++){
            
            codigos[i] = turnos[i-1].getId() + " " + turnos[i-1].getCodigoTurno();
            
        }
        
        jCBCodigoTurno.setModel(new javax.swing.DefaultComboBoxModel(codigos));
    }
    
    private void actualizarListaEmpleados() throws MiExcepcion {
        Empleado[] empleados = controlEmpleado.listarEmpleados();
        if ((Arrays.asList(empleados)).isEmpty()) {
            throw new MiExcepcion("No hay empleados registrados en la base de datos.");
        }
        
        String[] cedulas = new String[empleados.length+1];
        
        cedulas[0] = "Seleccione la cédula del director...";
        
        for(int i=1; i<=empleados.length; i++){
            
            cedulas[i] = empleados[i-1].getCedula();
            
        }
        
        jCBCedulaDirector.setModel(new javax.swing.DefaultComboBoxModel(cedulas));
    }

    
    private void displayTab() throws MiExcepcion {
        // Bloqueamos el boton Buscar
        jBBuscarTurno.setEnabled(false);
        jTFCodigoTurno.setEditable(false);
        jCBCodigoTurno.setEnabled(false);
        // Desbloqueamos el Internal Frame     
        setLocked(false);
        // Definimos un nuevo tamaño.
        setSize(WIDTH_, 280);
        // Definimos el layot del panel...  
        jPUpdatePassword = new JPanel();
        jPUpdatePassword.setLayout(new BorderLayout());
        jPUpdatePassword.setBorder(new EtchedBorder());
        // Creamos un panel para las etiquetas.
        JPanel jPUpdateLabels = new JPanel();
        jPUpdateLabels.setLayout(new GridLayout(3, 1));
        // Creamos las etiquetas.
        JLabel jLCurrent = new JLabel("Codigo turno:");
        JLabel jLNew = new JLabel("Hora inicio:");
        JLabel jLRetype = new JLabel("Hora fin:");
        // Añadimos las etiquetas.
        jPUpdateLabels.add(jLCurrent);
        jPUpdateLabels.add(jLNew);
        jPUpdateLabels.add(jLRetype);
        // Creamos el panel para los campos de contraseña.
        JPanel jPUpdateTF = new JPanel();
        jPUpdateTF.setLayout(new GridLayout(3, 1));
        // Campos de contraseña.
        jTFHoraInicio = new JTextField();
        jTFHoraFin = new JTextField();
        jCBCodigoTurno = new JComboBox(); 
        
        actualizarListaEmpleados();        
        
        // Añadimos los campos de texto al panel
        jPUpdateTF.add(jTFNombre);
        jPUpdateTF.add(jTFDireccion);
        jPUpdateTF.add(jCBCedulaDirector);
        
        jPBotonesModificar = new JPanel();
        jPBotonesModificar.setLayout(new FlowLayout());
        //jPBotonesModificar.setBorder(new EtchedBorder());
        
        jBGuardarModificaciones = new JButton("GUARDAR MODIFICACIÓN");
        jBGuardarModificaciones.addActionListener(manejadorEventos);
        
        jBCancelar = new JButton("CANCELAR");
        jBCancelar.addActionListener(manejadorEventos);
        
        jPBotonesModificar.add(jBGuardarModificaciones);
        jPBotonesModificar.add(jBCancelar);
        
        jPBotonesModificar.setVisible(false);
        
        String codigo = jTFCodigoTurno.getText().trim();
        
        Turno estacion = controlTurno.buscarTurno(codigo);
        
        jTFNombre.setText(turno.getCodigoTurno());
        jTFDireccion.setText(turno.getDireccion());
                
        for(int i=1; i<=jCBCedulaDirector.getItemCount(); i++) {
                        
            if(turno.getCodigoTurno().equals(jCBCedulaDirector.getItemAt(i))) {
                jCBCedulaDirector.setSelectedIndex(i);
                break;
            }
            
        }
        
        jTFNombre.setEditable(false);
        jTFDireccion.setEditable(false);
        jCBCedulaDirector.setEnabled(false);
        
        // Creamos un panel para los botones
        JPanel jPUpdateButtons = new JPanel();
        //jPUpdateButtons.setLayout(new GridLayout(1, 2));
        jPUpdateButtons.setLayout(new FlowLayout());
        
        JPanel jPBotones = new JPanel();
        jPBotones.setLayout(new BoxLayout(jPBotones, BoxLayout.PAGE_AXIS));
        jPBotones.setBorder(new EtchedBorder());
        //jPBotones.setLayout(new FlowLayout());
        //jPBotones.setLayout(new GridLayout(1, 2));
        //jPUpdateButtons.setBorder(new EtchedBorder());
        // Creamos los botones.
        jBModificar = new JButton("MODIFICAR");
        jBModificar.addActionListener(manejadorEventos);
        
        jBEliminar = new JButton("ELIMINAR");
        jBEliminar.addActionListener(manejadorEventos);
        
        jBBuscar = new JButton("BUSCAR DE NUEVO");
        jBBuscar.addActionListener(manejadorEventos);
        
        // Procedemos a agregar los botones al panel
        jPUpdateButtons.add(jBModificar);
        jPUpdateButtons.add(jBEliminar);
        jPUpdateButtons.add(jBBuscar);
        
        jPBotones.add(jPBotonesModificar);
        jPBotones.add(jPUpdateButtons);
        // Procedemos a armar el panel completo.
        jPUpdatePassword.add(jPUpdateLabels, "Before");
        jPUpdatePassword.add(jPUpdateTF, "Center");
        jPUpdatePassword.add(jPBotones, "Last");
        
        //jPUpdatePassword.add(jPUpdateLabels, "Before");
        //jPUpdatePassword.add(jPUpdateTF);
        //jPUpdatePassword.add(jPBotonesModificar);
        
        //jPUpdatePassword.add(jPUpdateButtons, "Last");
        // Agregamos el panel ala ventana principal
        //this.add(jPUpdatePassword, "South");
        this.jPBotonBuscar.setLayout(new BoxLayout(jPBotonBuscar, BoxLayout.PAGE_AXIS));
        this.jPBotonBuscar.add(jPUpdatePassword);        
        // Bloqueamos de nuevo el internal frame.
        setLocked(true);
        // Actualizamos la interfaz.
        updateUI();
    }

    private void retractTab() {
        // Limpiamos los campos.
        this.jTFNombre.setText("");
        this.jTFDireccion.setText("");
        this.jCBCedulaDirector.setSelectedIndex(0);
        this.jTFCodigoTurno.setText("");
        this.jCBCodigoTurno.setSelectedIndex(0);
        // Debemos recoger la ventana y retirar los componentes.
        // Reactivamos el boton editar.
        jBBuscarTurno.setEnabled(true);
        jTFCodigoTurno.setEditable(true);
        jCBCodigoTurno.setEnabled(true);
        // Retiramos los componentes:
        this.jPBotonBuscar.remove(jPUpdatePassword);
        jPBotonBuscar.setLayout(new FlowLayout());
        // Desbloqueamos el internal frame para devolverlo a su tamaño original.
        setLocked(false);
        setSize(WIDTH_, HEIGHT_);
        setLocked(true);
        // Actualizamos la interfaz grafica.
        updateUI();
    }
      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscarTurno;
    private javax.swing.JComboBox jCBCodigoTurno;
    private javax.swing.JLabel jLCodigoTurno;
    private javax.swing.JLabel jLControlPassword;
    private javax.swing.JPanel jPBotonBuscar;
    private javax.swing.JPanel jPContenedorBoton;
    private javax.swing.JPanel jPControls;
    private javax.swing.JPanel jPInformacion;
    private javax.swing.JPanel jPLabels;
    private javax.swing.JTextField jTFCodigoTurno;
    // End of variables declaration//GEN-END:variables
    private final int parentWidth;
    private final int parentHeight;
    private JButton jBModificar;
    private JButton jBEliminar;
    private JButton jBBuscar;
    private JButton jBGuardarModificaciones;
    private JButton jBCancelar;
    private JTextField jTFNombre;
    private JTextField jTFHoraInicio;
    private JTextField jTFHoraFin;
    private JTextField jTFDireccion;
    private JComboBox jCBCedulaDirector;
    private JPanel jPUpdatePassword;
    private JPanel jPBotonesModificar;
    private LanzarMensaje lanzarMensaje;
    private buscarTurnoManejadorEventos manejadorEventos;
    private final static int WIDTH_ = 650;
    private final static int HEIGHT_ = 120;
    private Validador validador;
    private ControlTurno controlTurno;
    private ControlEmpleado controlEmpleado;
    private boolean registros;
    
    private class buscarTurnoManejadorEventos implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            if(e.getSource() == jCBCodigoTurno) {
                
                try{
                    if(jCBCodigoTurno.getSelectedIndex()!=0){                                                                                          
                                
                        String informacion = (String) jCBCodigoTurno.getSelectedItem();
                        
                        String codigo = "";
                        
                        for(int i=0; i<informacion.length(); i++) {
                            
                            if(informacion.charAt(i)==' ') { 
                                
                                codigo = informacion.substring(0, i);  
                                
                                break;
                                
                            }
                        } 
                         
                        jTFCodigoTurno.setText(codigo);
                        
                    }else{
                        jTFCodigoTurno.setText("");
                    }
                    
                } catch (Exception ex){
                    jTFCodigoTurno.setText("");
                }          
            }
            
            if(e.getSource() == jBModificar){
                
                jPBotonesModificar.setVisible(true);
                jBModificar.setEnabled(false);
                jBEliminar.setEnabled(false);
                jBBuscar.setEnabled(false);
                
                jTFNombre.setEditable(true);
                jTFDireccion.setEditable(true);
                jCBCedulaDirector.setEnabled(true);
                
            }
            
            if(e.getSource() == jBGuardarModificaciones) {
                
                String[] informacion = new String[4];
                informacion[0] = jTFCodigoTurno.getText();
                informacion[1] = jTFNombre.getText().toUpperCase();
                informacion[2] = jTFDireccion.getText().toUpperCase();
                informacion[3] = (String) jCBCedulaDirector.getSelectedItem();
                
                try {
                                        
                    validador.validarCampoVacio(informacion[1], "NOMBRE");
                    validador.validarCampoVacio(informacion[2], "DIRECCIÓN");
                    
                    if(jCBCedulaDirector.getSelectedItem()==jCBCedulaDirector.getItemAt(0)) {

                        lanzarMensaje.mostrarMessageDialog("Debe seleccionar la cédula del director.", title, JOptionPane.INFORMATION_MESSAGE); 

                    } else {

                    Turno[] turno = controlTurno.yaExisteTurno(informacion[3]);

                    if ((Arrays.asList(turno)).isEmpty()) {

                        controlTurno.modificarTurno(informacion);
                        lanzarMensaje.mostrarMessageDialog("La estación ha sido modificada en la base de datos con éxito.", title, JOptionPane.INFORMATION_MESSAGE);
                        actualizarTurnos();
                        retractTab();
                    }else {

                        lanzarMensaje.mostrarMessageDialog("No se pudo modificar la estación, ya que el empleado con la cédula " + informacion[3] 
                                + " ya es director de la estación " + turno[0].getCodigoTurno(), 
                                title, JOptionPane.ERROR_MESSAGE);              

                    }
                    }                   
                    
                } catch (MiExcepcion ex) {
                    lanzarMensaje.mostrarMessageDialog(ex.getMessage(), title, JOptionPane.ERROR_MESSAGE);
                }               
                
            }
            
            if(e.getSource() == jBCancelar || e.getSource() == jBBuscar) {
                
                retractTab();
                
            }
            
            if(e.getSource() == jBEliminar) {
                
                String codigoTurno = jTFCodigoTurno.getText();
                
                try {
                    controlTurno.eliminarTurnos(codigoTurno);
                    lanzarMensaje.mostrarMessageDialog("El turno fue eliminado con éxito.", title, JOptionPane.INFORMATION_MESSAGE);
                    actualizarTurnos();                    
                } catch (MiExcepcion ex) {
                    
                    lanzarMensaje.mostrarMessageDialog(ex.getMessage(), title, JOptionPane.ERROR_MESSAGE);
                    
                } finally {
                    
                    retractTab();
                    
                }
                
            }
            
        }
    }
    
};
